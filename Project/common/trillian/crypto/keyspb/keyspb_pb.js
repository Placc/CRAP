/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.keyspb.PEMKeyFile', null, global);
goog.exportSymbol('proto.keyspb.PKCS11Config', null, global);
goog.exportSymbol('proto.keyspb.PrivateKey', null, global);
goog.exportSymbol('proto.keyspb.PublicKey', null, global);
goog.exportSymbol('proto.keyspb.Specification', null, global);
goog.exportSymbol('proto.keyspb.Specification.ECDSA', null, global);
goog.exportSymbol('proto.keyspb.Specification.ECDSA.Curve', null, global);
goog.exportSymbol('proto.keyspb.Specification.RSA', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.Specification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.keyspb.Specification.oneofGroups_);
};
goog.inherits(proto.keyspb.Specification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.Specification.displayName = 'proto.keyspb.Specification';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.keyspb.Specification.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.keyspb.Specification.ParamsCase = {
  PARAMS_NOT_SET: 0,
  ECDSA_PARAMS: 1,
  RSA_PARAMS: 2
};

/**
 * @return {proto.keyspb.Specification.ParamsCase}
 */
proto.keyspb.Specification.prototype.getParamsCase = function() {
  return /** @type {proto.keyspb.Specification.ParamsCase} */(jspb.Message.computeOneofCase(this, proto.keyspb.Specification.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.Specification.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.Specification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.Specification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecdsaParams: (f = msg.getEcdsaParams()) && proto.keyspb.Specification.ECDSA.toObject(includeInstance, f),
    rsaParams: (f = msg.getRsaParams()) && proto.keyspb.Specification.RSA.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.Specification}
 */
proto.keyspb.Specification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.Specification;
  return proto.keyspb.Specification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.Specification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.Specification}
 */
proto.keyspb.Specification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.keyspb.Specification.ECDSA;
      reader.readMessage(value,proto.keyspb.Specification.ECDSA.deserializeBinaryFromReader);
      msg.setEcdsaParams(value);
      break;
    case 2:
      var value = new proto.keyspb.Specification.RSA;
      reader.readMessage(value,proto.keyspb.Specification.RSA.deserializeBinaryFromReader);
      msg.setRsaParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.Specification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.Specification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.Specification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcdsaParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.keyspb.Specification.ECDSA.serializeBinaryToWriter
    );
  }
  f = message.getRsaParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.keyspb.Specification.RSA.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.Specification.ECDSA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.Specification.ECDSA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.Specification.ECDSA.displayName = 'proto.keyspb.Specification.ECDSA';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.Specification.ECDSA.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.Specification.ECDSA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.Specification.ECDSA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.ECDSA.toObject = function(includeInstance, msg) {
  var f, obj = {
    curve: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.Specification.ECDSA}
 */
proto.keyspb.Specification.ECDSA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.Specification.ECDSA;
  return proto.keyspb.Specification.ECDSA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.Specification.ECDSA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.Specification.ECDSA}
 */
proto.keyspb.Specification.ECDSA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.keyspb.Specification.ECDSA.Curve} */ (reader.readEnum());
      msg.setCurve(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.Specification.ECDSA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.Specification.ECDSA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.Specification.ECDSA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.ECDSA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurve();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.keyspb.Specification.ECDSA.Curve = {
  DEFAULT_CURVE: 0,
  P256: 1,
  P384: 2,
  P521: 3
};

/**
 * optional Curve curve = 1;
 * @return {!proto.keyspb.Specification.ECDSA.Curve}
 */
proto.keyspb.Specification.ECDSA.prototype.getCurve = function() {
  return /** @type {!proto.keyspb.Specification.ECDSA.Curve} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.keyspb.Specification.ECDSA.Curve} value */
proto.keyspb.Specification.ECDSA.prototype.setCurve = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.Specification.RSA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.Specification.RSA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.Specification.RSA.displayName = 'proto.keyspb.Specification.RSA';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.Specification.RSA.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.Specification.RSA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.Specification.RSA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.RSA.toObject = function(includeInstance, msg) {
  var f, obj = {
    bits: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.Specification.RSA}
 */
proto.keyspb.Specification.RSA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.Specification.RSA;
  return proto.keyspb.Specification.RSA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.Specification.RSA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.Specification.RSA}
 */
proto.keyspb.Specification.RSA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.Specification.RSA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.Specification.RSA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.Specification.RSA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.Specification.RSA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBits();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 bits = 1;
 * @return {number}
 */
proto.keyspb.Specification.RSA.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.keyspb.Specification.RSA.prototype.setBits = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ECDSA ecdsa_params = 1;
 * @return {?proto.keyspb.Specification.ECDSA}
 */
proto.keyspb.Specification.prototype.getEcdsaParams = function() {
  return /** @type{?proto.keyspb.Specification.ECDSA} */ (
    jspb.Message.getWrapperField(this, proto.keyspb.Specification.ECDSA, 1));
};


/** @param {?proto.keyspb.Specification.ECDSA|undefined} value */
proto.keyspb.Specification.prototype.setEcdsaParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.keyspb.Specification.oneofGroups_[0], value);
};


proto.keyspb.Specification.prototype.clearEcdsaParams = function() {
  this.setEcdsaParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyspb.Specification.prototype.hasEcdsaParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RSA rsa_params = 2;
 * @return {?proto.keyspb.Specification.RSA}
 */
proto.keyspb.Specification.prototype.getRsaParams = function() {
  return /** @type{?proto.keyspb.Specification.RSA} */ (
    jspb.Message.getWrapperField(this, proto.keyspb.Specification.RSA, 2));
};


/** @param {?proto.keyspb.Specification.RSA|undefined} value */
proto.keyspb.Specification.prototype.setRsaParams = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.keyspb.Specification.oneofGroups_[0], value);
};


proto.keyspb.Specification.prototype.clearRsaParams = function() {
  this.setRsaParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.keyspb.Specification.prototype.hasRsaParams = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.PEMKeyFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.PEMKeyFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.PEMKeyFile.displayName = 'proto.keyspb.PEMKeyFile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.PEMKeyFile.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.PEMKeyFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.PEMKeyFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PEMKeyFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.PEMKeyFile}
 */
proto.keyspb.PEMKeyFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.PEMKeyFile;
  return proto.keyspb.PEMKeyFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.PEMKeyFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.PEMKeyFile}
 */
proto.keyspb.PEMKeyFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.PEMKeyFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.PEMKeyFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.PEMKeyFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PEMKeyFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.keyspb.PEMKeyFile.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyspb.PEMKeyFile.prototype.setPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.keyspb.PEMKeyFile.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.keyspb.PEMKeyFile.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.PrivateKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.PrivateKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.PrivateKey.displayName = 'proto.keyspb.PrivateKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.PrivateKey.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.PrivateKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.PrivateKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PrivateKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    der: msg.getDer_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.PrivateKey}
 */
proto.keyspb.PrivateKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.PrivateKey;
  return proto.keyspb.PrivateKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.PrivateKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.PrivateKey}
 */
proto.keyspb.PrivateKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.PrivateKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.PrivateKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.PrivateKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PrivateKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes der = 1;
 * @return {string}
 */
proto.keyspb.PrivateKey.prototype.getDer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes der = 1;
 * This is a type-conversion wrapper around `getDer()`
 * @return {string}
 */
proto.keyspb.PrivateKey.prototype.getDer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDer()));
};


/**
 * optional bytes der = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDer()`
 * @return {!Uint8Array}
 */
proto.keyspb.PrivateKey.prototype.getDer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDer()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyspb.PrivateKey.prototype.setDer = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.PublicKey.displayName = 'proto.keyspb.PublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    der: msg.getDer_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.PublicKey}
 */
proto.keyspb.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.PublicKey;
  return proto.keyspb.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.PublicKey}
 */
proto.keyspb.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.PublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes der = 1;
 * @return {string}
 */
proto.keyspb.PublicKey.prototype.getDer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes der = 1;
 * This is a type-conversion wrapper around `getDer()`
 * @return {string}
 */
proto.keyspb.PublicKey.prototype.getDer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDer()));
};


/**
 * optional bytes der = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDer()`
 * @return {!Uint8Array}
 */
proto.keyspb.PublicKey.prototype.getDer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDer()));
};


/** @param {!(string|Uint8Array)} value */
proto.keyspb.PublicKey.prototype.setDer = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.keyspb.PKCS11Config = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.keyspb.PKCS11Config, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.keyspb.PKCS11Config.displayName = 'proto.keyspb.PKCS11Config';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.keyspb.PKCS11Config.prototype.toObject = function(opt_includeInstance) {
  return proto.keyspb.PKCS11Config.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.keyspb.PKCS11Config} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PKCS11Config.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenLabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pin: jspb.Message.getFieldWithDefault(msg, 2, ""),
    publicKey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.keyspb.PKCS11Config}
 */
proto.keyspb.PKCS11Config.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.keyspb.PKCS11Config;
  return proto.keyspb.PKCS11Config.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.keyspb.PKCS11Config} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.keyspb.PKCS11Config}
 */
proto.keyspb.PKCS11Config.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPin(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.keyspb.PKCS11Config.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.keyspb.PKCS11Config.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.keyspb.PKCS11Config} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.keyspb.PKCS11Config.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPin();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string token_label = 1;
 * @return {string}
 */
proto.keyspb.PKCS11Config.prototype.getTokenLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.keyspb.PKCS11Config.prototype.setTokenLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pin = 2;
 * @return {string}
 */
proto.keyspb.PKCS11Config.prototype.getPin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.keyspb.PKCS11Config.prototype.setPin = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string public_key = 3;
 * @return {string}
 */
proto.keyspb.PKCS11Config.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.keyspb.PKCS11Config.prototype.setPublicKey = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.keyspb);
