/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var google_protobuf_timestamp_pb = require("google-protobuf/google/protobuf/timestamp_pb");
var google_rpc_status_pb = require("../rpc/status_pb.js");
var trillian_pb = require("./trillian_pb.js");
goog.exportSymbol("proto.trillian.AddSequencedLeafRequest", null, global);
goog.exportSymbol("proto.trillian.AddSequencedLeafResponse", null, global);
goog.exportSymbol("proto.trillian.AddSequencedLeavesRequest", null, global);
goog.exportSymbol("proto.trillian.AddSequencedLeavesResponse", null, global);
goog.exportSymbol("proto.trillian.ChargeTo", null, global);
goog.exportSymbol("proto.trillian.GetConsistencyProofRequest", null, global);
goog.exportSymbol("proto.trillian.GetConsistencyProofResponse", null, global);
goog.exportSymbol("proto.trillian.GetEntryAndProofRequest", null, global);
goog.exportSymbol("proto.trillian.GetEntryAndProofResponse", null, global);
goog.exportSymbol(
  "proto.trillian.GetInclusionProofByHashRequest",
  null,
  global
);
goog.exportSymbol(
  "proto.trillian.GetInclusionProofByHashResponse",
  null,
  global
);
goog.exportSymbol("proto.trillian.GetInclusionProofRequest", null, global);
goog.exportSymbol("proto.trillian.GetInclusionProofResponse", null, global);
goog.exportSymbol("proto.trillian.GetLatestSignedLogRootRequest", null, global);
goog.exportSymbol(
  "proto.trillian.GetLatestSignedLogRootResponse",
  null,
  global
);
goog.exportSymbol("proto.trillian.GetLeavesByHashRequest", null, global);
goog.exportSymbol("proto.trillian.GetLeavesByHashResponse", null, global);
goog.exportSymbol("proto.trillian.GetLeavesByIndexRequest", null, global);
goog.exportSymbol("proto.trillian.GetLeavesByIndexResponse", null, global);
goog.exportSymbol("proto.trillian.GetLeavesByRangeRequest", null, global);
goog.exportSymbol("proto.trillian.GetLeavesByRangeResponse", null, global);
goog.exportSymbol("proto.trillian.GetSequencedLeafCountRequest", null, global);
goog.exportSymbol("proto.trillian.GetSequencedLeafCountResponse", null, global);
goog.exportSymbol("proto.trillian.InitLogRequest", null, global);
goog.exportSymbol("proto.trillian.InitLogResponse", null, global);
goog.exportSymbol("proto.trillian.LogLeaf", null, global);
goog.exportSymbol("proto.trillian.Proof", null, global);
goog.exportSymbol("proto.trillian.QueueLeafRequest", null, global);
goog.exportSymbol("proto.trillian.QueueLeafResponse", null, global);
goog.exportSymbol("proto.trillian.QueueLeavesRequest", null, global);
goog.exportSymbol("proto.trillian.QueueLeavesResponse", null, global);
goog.exportSymbol("proto.trillian.QueuedLogLeaf", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.ChargeTo = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.ChargeTo.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.ChargeTo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.ChargeTo.displayName = "proto.trillian.ChargeTo";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.ChargeTo.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.ChargeTo.prototype.toObject = function(opt_includeInstance) {
    return proto.trillian.ChargeTo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.ChargeTo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.ChargeTo.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        userList: jspb.Message.getRepeatedField(msg, 1)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.ChargeTo}
 */
proto.trillian.ChargeTo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.ChargeTo();
  return proto.trillian.ChargeTo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.ChargeTo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.ChargeTo}
 */
proto.trillian.ChargeTo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readString());
        msg.addUser(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.ChargeTo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.ChargeTo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.ChargeTo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.ChargeTo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedString(1, f);
  }
};

/**
 * repeated string user = 1;
 * @return {!Array.<string>}
 */
proto.trillian.ChargeTo.prototype.getUserList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(
    this,
    1
  ));
};

/** @param {!Array.<string>} value */
proto.trillian.ChargeTo.prototype.setUserList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.trillian.ChargeTo.prototype.addUser = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};

proto.trillian.ChargeTo.prototype.clearUserList = function() {
  this.setUserList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.QueueLeafRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.QueueLeafRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.QueueLeafRequest.displayName =
    "proto.trillian.QueueLeafRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.QueueLeafRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.QueueLeafRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.QueueLeafRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.QueueLeafRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leaf:
          (f = msg.getLeaf()) &&
          proto.trillian.LogLeaf.toObject(includeInstance, f),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.QueueLeafRequest}
 */
proto.trillian.QueueLeafRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.QueueLeafRequest();
  return proto.trillian.QueueLeafRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.QueueLeafRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.QueueLeafRequest}
 */
proto.trillian.QueueLeafRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.setLeaf(value);
        break;
      case 3:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.QueueLeafRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.QueueLeafRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.QueueLeafRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.QueueLeafRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeaf();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.LogLeaf.serializeBinaryToWriter);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(3, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.QueueLeafRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.QueueLeafRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional LogLeaf leaf = 2;
 * @return {?proto.trillian.LogLeaf}
 */
proto.trillian.QueueLeafRequest.prototype.getLeaf = function() {
  return /** @type{?proto.trillian.LogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {?proto.trillian.LogLeaf|undefined} value */
proto.trillian.QueueLeafRequest.prototype.setLeaf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.QueueLeafRequest.prototype.clearLeaf = function() {
  this.setLeaf(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueueLeafRequest.prototype.hasLeaf = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ChargeTo charge_to = 3;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.QueueLeafRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    3
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.QueueLeafRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.QueueLeafRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueueLeafRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.QueueLeafResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.QueueLeafResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.QueueLeafResponse.displayName =
    "proto.trillian.QueueLeafResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.QueueLeafResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.QueueLeafResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.QueueLeafResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.QueueLeafResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        queuedLeaf:
          (f = msg.getQueuedLeaf()) &&
          proto.trillian.QueuedLogLeaf.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.QueueLeafResponse}
 */
proto.trillian.QueueLeafResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.QueueLeafResponse();
  return proto.trillian.QueueLeafResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.QueueLeafResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.QueueLeafResponse}
 */
proto.trillian.QueueLeafResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.QueuedLogLeaf();
        reader.readMessage(
          value,
          proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader
        );
        msg.setQueuedLeaf(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.QueueLeafResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.QueueLeafResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.QueueLeafResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.QueueLeafResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getQueuedLeaf();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trillian.QueuedLogLeaf.serializeBinaryToWriter
    );
  }
};

/**
 * optional QueuedLogLeaf queued_leaf = 2;
 * @return {?proto.trillian.QueuedLogLeaf}
 */
proto.trillian.QueueLeafResponse.prototype.getQueuedLeaf = function() {
  return /** @type{?proto.trillian.QueuedLogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.QueuedLogLeaf,
    2
  ));
};

/** @param {?proto.trillian.QueuedLogLeaf|undefined} value */
proto.trillian.QueueLeafResponse.prototype.setQueuedLeaf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.QueueLeafResponse.prototype.clearQueuedLeaf = function() {
  this.setQueuedLeaf(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueueLeafResponse.prototype.hasQueuedLeaf = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.AddSequencedLeafRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.AddSequencedLeafRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.AddSequencedLeafRequest.displayName =
    "proto.trillian.AddSequencedLeafRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.AddSequencedLeafRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.AddSequencedLeafRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.AddSequencedLeafRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.AddSequencedLeafRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leaf:
          (f = msg.getLeaf()) &&
          proto.trillian.LogLeaf.toObject(includeInstance, f),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.AddSequencedLeafRequest}
 */
proto.trillian.AddSequencedLeafRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.AddSequencedLeafRequest();
  return proto.trillian.AddSequencedLeafRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.AddSequencedLeafRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.AddSequencedLeafRequest}
 */
proto.trillian.AddSequencedLeafRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.setLeaf(value);
        break;
      case 3:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.AddSequencedLeafRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.AddSequencedLeafRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.AddSequencedLeafRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.AddSequencedLeafRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeaf();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.LogLeaf.serializeBinaryToWriter);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(3, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.AddSequencedLeafRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.AddSequencedLeafRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional LogLeaf leaf = 2;
 * @return {?proto.trillian.LogLeaf}
 */
proto.trillian.AddSequencedLeafRequest.prototype.getLeaf = function() {
  return /** @type{?proto.trillian.LogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {?proto.trillian.LogLeaf|undefined} value */
proto.trillian.AddSequencedLeafRequest.prototype.setLeaf = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.AddSequencedLeafRequest.prototype.clearLeaf = function() {
  this.setLeaf(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.AddSequencedLeafRequest.prototype.hasLeaf = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional ChargeTo charge_to = 3;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.AddSequencedLeafRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    3
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.AddSequencedLeafRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.AddSequencedLeafRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.AddSequencedLeafRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.AddSequencedLeafResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.AddSequencedLeafResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.AddSequencedLeafResponse.displayName =
    "proto.trillian.AddSequencedLeafResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.AddSequencedLeafResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.AddSequencedLeafResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.AddSequencedLeafResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.AddSequencedLeafResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        result:
          (f = msg.getResult()) &&
          proto.trillian.QueuedLogLeaf.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.AddSequencedLeafResponse}
 */
proto.trillian.AddSequencedLeafResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.AddSequencedLeafResponse();
  return proto.trillian.AddSequencedLeafResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.AddSequencedLeafResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.AddSequencedLeafResponse}
 */
proto.trillian.AddSequencedLeafResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.QueuedLogLeaf();
        reader.readMessage(
          value,
          proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader
        );
        msg.setResult(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.AddSequencedLeafResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.AddSequencedLeafResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.AddSequencedLeafResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.AddSequencedLeafResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getResult();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.trillian.QueuedLogLeaf.serializeBinaryToWriter
    );
  }
};

/**
 * optional QueuedLogLeaf result = 2;
 * @return {?proto.trillian.QueuedLogLeaf}
 */
proto.trillian.AddSequencedLeafResponse.prototype.getResult = function() {
  return /** @type{?proto.trillian.QueuedLogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.QueuedLogLeaf,
    2
  ));
};

/** @param {?proto.trillian.QueuedLogLeaf|undefined} value */
proto.trillian.AddSequencedLeafResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.AddSequencedLeafResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.AddSequencedLeafResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetInclusionProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetInclusionProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetInclusionProofRequest.displayName =
    "proto.trillian.GetInclusionProofRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetInclusionProofRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetInclusionProofRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetInclusionProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetInclusionProofRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leafIndex: jspb.Message.getFieldWithDefault(msg, 2, "0"),
        treeSize: jspb.Message.getFieldWithDefault(msg, 3, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetInclusionProofRequest}
 */
proto.trillian.GetInclusionProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetInclusionProofRequest();
  return proto.trillian.GetInclusionProofRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetInclusionProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetInclusionProofRequest}
 */
proto.trillian.GetInclusionProofRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLeafIndex(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeSize(value);
        break;
      case 4:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetInclusionProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetInclusionProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetInclusionProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetInclusionProofRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeafIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(2, f);
  }
  f = message.getTreeSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(3, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(4, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetInclusionProofRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetInclusionProofRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 leaf_index = 2;
 * @return {string}
 */
proto.trillian.GetInclusionProofRequest.prototype.getLeafIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};

/** @param {string} value */
proto.trillian.GetInclusionProofRequest.prototype.setLeafIndex = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 tree_size = 3;
 * @return {string}
 */
proto.trillian.GetInclusionProofRequest.prototype.getTreeSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};

/** @param {string} value */
proto.trillian.GetInclusionProofRequest.prototype.setTreeSize = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ChargeTo charge_to = 4;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetInclusionProofRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    4
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetInclusionProofRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.GetInclusionProofRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetInclusionProofRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetInclusionProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetInclusionProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetInclusionProofResponse.displayName =
    "proto.trillian.GetInclusionProofResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetInclusionProofResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetInclusionProofResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetInclusionProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetInclusionProofResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.trillian.Proof.toObject(includeInstance, f),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetInclusionProofResponse}
 */
proto.trillian.GetInclusionProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetInclusionProofResponse();
  return proto.trillian.GetInclusionProofResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetInclusionProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetInclusionProofResponse}
 */
proto.trillian.GetInclusionProofResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.Proof();
        reader.readMessage(
          value,
          proto.trillian.Proof.deserializeBinaryFromReader
        );
        msg.setProof(value);
        break;
      case 3:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetInclusionProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetInclusionProofResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetInclusionProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetInclusionProofResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.Proof.serializeBinaryToWriter);
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * optional Proof proof = 2;
 * @return {?proto.trillian.Proof}
 */
proto.trillian.GetInclusionProofResponse.prototype.getProof = function() {
  return /** @type{?proto.trillian.Proof} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.Proof,
    2
  ));
};

/** @param {?proto.trillian.Proof|undefined} value */
proto.trillian.GetInclusionProofResponse.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetInclusionProofResponse.prototype.clearProof = function() {
  this.setProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetInclusionProofResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional SignedLogRoot signed_log_root = 3;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetInclusionProofResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    3
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetInclusionProofResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetInclusionProofResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetInclusionProofResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetInclusionProofByHashRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetInclusionProofByHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetInclusionProofByHashRequest.displayName =
    "proto.trillian.GetInclusionProofByHashRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetInclusionProofByHashRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetInclusionProofByHashRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetInclusionProofByHashRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetInclusionProofByHashRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leafHash: msg.getLeafHash_asB64(),
        treeSize: jspb.Message.getFieldWithDefault(msg, 3, "0"),
        orderBySequence: jspb.Message.getFieldWithDefault(msg, 4, false),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetInclusionProofByHashRequest}
 */
proto.trillian.GetInclusionProofByHashRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetInclusionProofByHashRequest();
  return proto.trillian.GetInclusionProofByHashRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetInclusionProofByHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetInclusionProofByHashRequest}
 */
proto.trillian.GetInclusionProofByHashRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLeafHash(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeSize(value);
        break;
      case 4:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setOrderBySequence(value);
        break;
      case 5:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetInclusionProofByHashRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetInclusionProofByHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetInclusionProofByHashRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeafHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getTreeSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(3, f);
  }
  f = message.getOrderBySequence();
  if (f) {
    writer.writeBool(4, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(5, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetInclusionProofByHashRequest.prototype.setLogId = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes leaf_hash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getLeafHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ""
  ));
};

/**
 * optional bytes leaf_hash = 2;
 * This is a type-conversion wrapper around `getLeafHash()`
 * @return {string}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getLeafHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLeafHash()));
};

/**
 * optional bytes leaf_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeafHash()`
 * @return {!Uint8Array}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getLeafHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getLeafHash()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.trillian.GetInclusionProofByHashRequest.prototype.setLeafHash = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 tree_size = 3;
 * @return {string}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getTreeSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};

/** @param {string} value */
proto.trillian.GetInclusionProofByHashRequest.prototype.setTreeSize = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional bool order_by_sequence = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getOrderBySequence = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    false
  ));
};

/** @param {boolean} value */
proto.trillian.GetInclusionProofByHashRequest.prototype.setOrderBySequence = function(
  value
) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional ChargeTo charge_to = 5;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    5
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetInclusionProofByHashRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.trillian.GetInclusionProofByHashRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetInclusionProofByHashRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetInclusionProofByHashResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetInclusionProofByHashResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetInclusionProofByHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetInclusionProofByHashResponse.displayName =
    "proto.trillian.GetInclusionProofByHashResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetInclusionProofByHashResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetInclusionProofByHashResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetInclusionProofByHashResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetInclusionProofByHashResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetInclusionProofByHashResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        proofList: jspb.Message.toObjectList(
          msg.getProofList(),
          proto.trillian.Proof.toObject,
          includeInstance
        ),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetInclusionProofByHashResponse}
 */
proto.trillian.GetInclusionProofByHashResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetInclusionProofByHashResponse();
  return proto.trillian.GetInclusionProofByHashResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetInclusionProofByHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetInclusionProofByHashResponse}
 */
proto.trillian.GetInclusionProofByHashResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.Proof();
        reader.readMessage(
          value,
          proto.trillian.Proof.deserializeBinaryFromReader
        );
        msg.addProof(value);
        break;
      case 3:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetInclusionProofByHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetInclusionProofByHashResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetInclusionProofByHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetInclusionProofByHashResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getProofList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.Proof.serializeBinaryToWriter
    );
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * repeated Proof proof = 2;
 * @return {!Array.<!proto.trillian.Proof>}
 */
proto.trillian.GetInclusionProofByHashResponse.prototype.getProofList = function() {
  return /** @type{!Array.<!proto.trillian.Proof>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.Proof,
    2
  ));
};

/** @param {!Array.<!proto.trillian.Proof>} value */
proto.trillian.GetInclusionProofByHashResponse.prototype.setProofList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.Proof=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.Proof}
 */
proto.trillian.GetInclusionProofByHashResponse.prototype.addProof = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.Proof,
    opt_index
  );
};

proto.trillian.GetInclusionProofByHashResponse.prototype.clearProofList = function() {
  this.setProofList([]);
};

/**
 * optional SignedLogRoot signed_log_root = 3;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetInclusionProofByHashResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    3
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetInclusionProofByHashResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetInclusionProofByHashResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetInclusionProofByHashResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetConsistencyProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetConsistencyProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetConsistencyProofRequest.displayName =
    "proto.trillian.GetConsistencyProofRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetConsistencyProofRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetConsistencyProofRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetConsistencyProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetConsistencyProofRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        firstTreeSize: jspb.Message.getFieldWithDefault(msg, 2, "0"),
        secondTreeSize: jspb.Message.getFieldWithDefault(msg, 3, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetConsistencyProofRequest}
 */
proto.trillian.GetConsistencyProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetConsistencyProofRequest();
  return proto.trillian.GetConsistencyProofRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetConsistencyProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetConsistencyProofRequest}
 */
proto.trillian.GetConsistencyProofRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setFirstTreeSize(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setSecondTreeSize(value);
        break;
      case 4:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetConsistencyProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetConsistencyProofRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetConsistencyProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetConsistencyProofRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getFirstTreeSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(2, f);
  }
  f = message.getSecondTreeSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(3, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(4, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetConsistencyProofRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetConsistencyProofRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 first_tree_size = 2;
 * @return {string}
 */
proto.trillian.GetConsistencyProofRequest.prototype.getFirstTreeSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};

/** @param {string} value */
proto.trillian.GetConsistencyProofRequest.prototype.setFirstTreeSize = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 second_tree_size = 3;
 * @return {string}
 */
proto.trillian.GetConsistencyProofRequest.prototype.getSecondTreeSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};

/** @param {string} value */
proto.trillian.GetConsistencyProofRequest.prototype.setSecondTreeSize = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ChargeTo charge_to = 4;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetConsistencyProofRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    4
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetConsistencyProofRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.GetConsistencyProofRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetConsistencyProofRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetConsistencyProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetConsistencyProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetConsistencyProofResponse.displayName =
    "proto.trillian.GetConsistencyProofResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetConsistencyProofResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetConsistencyProofResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetConsistencyProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetConsistencyProofResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.trillian.Proof.toObject(includeInstance, f),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetConsistencyProofResponse}
 */
proto.trillian.GetConsistencyProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetConsistencyProofResponse();
  return proto.trillian.GetConsistencyProofResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetConsistencyProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetConsistencyProofResponse}
 */
proto.trillian.GetConsistencyProofResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.Proof();
        reader.readMessage(
          value,
          proto.trillian.Proof.deserializeBinaryFromReader
        );
        msg.setProof(value);
        break;
      case 3:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetConsistencyProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetConsistencyProofResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetConsistencyProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetConsistencyProofResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.Proof.serializeBinaryToWriter);
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * optional Proof proof = 2;
 * @return {?proto.trillian.Proof}
 */
proto.trillian.GetConsistencyProofResponse.prototype.getProof = function() {
  return /** @type{?proto.trillian.Proof} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.Proof,
    2
  ));
};

/** @param {?proto.trillian.Proof|undefined} value */
proto.trillian.GetConsistencyProofResponse.prototype.setProof = function(
  value
) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetConsistencyProofResponse.prototype.clearProof = function() {
  this.setProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetConsistencyProofResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional SignedLogRoot signed_log_root = 3;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetConsistencyProofResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    3
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetConsistencyProofResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetConsistencyProofResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetConsistencyProofResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLatestSignedLogRootRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetLatestSignedLogRootRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLatestSignedLogRootRequest.displayName =
    "proto.trillian.GetLatestSignedLogRootRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLatestSignedLogRootRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLatestSignedLogRootRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLatestSignedLogRootRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLatestSignedLogRootRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLatestSignedLogRootRequest}
 */
proto.trillian.GetLatestSignedLogRootRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLatestSignedLogRootRequest();
  return proto.trillian.GetLatestSignedLogRootRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLatestSignedLogRootRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLatestSignedLogRootRequest}
 */
proto.trillian.GetLatestSignedLogRootRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLatestSignedLogRootRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLatestSignedLogRootRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLatestSignedLogRootRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLatestSignedLogRootRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetLatestSignedLogRootRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetLatestSignedLogRootRequest.prototype.setLogId = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ChargeTo charge_to = 2;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetLatestSignedLogRootRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    2
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetLatestSignedLogRootRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetLatestSignedLogRootRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLatestSignedLogRootRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLatestSignedLogRootResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetLatestSignedLogRootResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLatestSignedLogRootResponse.displayName =
    "proto.trillian.GetLatestSignedLogRootResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLatestSignedLogRootResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLatestSignedLogRootResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLatestSignedLogRootResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLatestSignedLogRootResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLatestSignedLogRootResponse}
 */
proto.trillian.GetLatestSignedLogRootResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLatestSignedLogRootResponse();
  return proto.trillian.GetLatestSignedLogRootResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLatestSignedLogRootResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLatestSignedLogRootResponse}
 */
proto.trillian.GetLatestSignedLogRootResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLatestSignedLogRootResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLatestSignedLogRootResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLatestSignedLogRootResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLatestSignedLogRootResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * optional SignedLogRoot signed_log_root = 2;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetLatestSignedLogRootResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    2
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetLatestSignedLogRootResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetLatestSignedLogRootResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLatestSignedLogRootResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetSequencedLeafCountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetSequencedLeafCountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetSequencedLeafCountRequest.displayName =
    "proto.trillian.GetSequencedLeafCountRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetSequencedLeafCountRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetSequencedLeafCountRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetSequencedLeafCountRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetSequencedLeafCountRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetSequencedLeafCountRequest}
 */
proto.trillian.GetSequencedLeafCountRequest.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetSequencedLeafCountRequest();
  return proto.trillian.GetSequencedLeafCountRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetSequencedLeafCountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetSequencedLeafCountRequest}
 */
proto.trillian.GetSequencedLeafCountRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetSequencedLeafCountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetSequencedLeafCountRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetSequencedLeafCountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetSequencedLeafCountRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetSequencedLeafCountRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetSequencedLeafCountRequest.prototype.setLogId = function(
  value
) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ChargeTo charge_to = 2;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetSequencedLeafCountRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    2
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetSequencedLeafCountRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetSequencedLeafCountRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetSequencedLeafCountRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetSequencedLeafCountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetSequencedLeafCountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetSequencedLeafCountResponse.displayName =
    "proto.trillian.GetSequencedLeafCountResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetSequencedLeafCountResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetSequencedLeafCountResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetSequencedLeafCountResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetSequencedLeafCountResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        leafCount: jspb.Message.getFieldWithDefault(msg, 2, "0")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetSequencedLeafCountResponse}
 */
proto.trillian.GetSequencedLeafCountResponse.deserializeBinary = function(
  bytes
) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetSequencedLeafCountResponse();
  return proto.trillian.GetSequencedLeafCountResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetSequencedLeafCountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetSequencedLeafCountResponse}
 */
proto.trillian.GetSequencedLeafCountResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLeafCount(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetSequencedLeafCountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetSequencedLeafCountResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetSequencedLeafCountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetSequencedLeafCountResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLeafCount();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(2, f);
  }
};

/**
 * optional int64 leaf_count = 2;
 * @return {string}
 */
proto.trillian.GetSequencedLeafCountResponse.prototype.getLeafCount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};

/** @param {string} value */
proto.trillian.GetSequencedLeafCountResponse.prototype.setLeafCount = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetEntryAndProofRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetEntryAndProofRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetEntryAndProofRequest.displayName =
    "proto.trillian.GetEntryAndProofRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetEntryAndProofRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetEntryAndProofRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetEntryAndProofRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetEntryAndProofRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leafIndex: jspb.Message.getFieldWithDefault(msg, 2, "0"),
        treeSize: jspb.Message.getFieldWithDefault(msg, 3, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetEntryAndProofRequest}
 */
proto.trillian.GetEntryAndProofRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetEntryAndProofRequest();
  return proto.trillian.GetEntryAndProofRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetEntryAndProofRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetEntryAndProofRequest}
 */
proto.trillian.GetEntryAndProofRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLeafIndex(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeSize(value);
        break;
      case 4:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetEntryAndProofRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetEntryAndProofRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetEntryAndProofRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetEntryAndProofRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeafIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(2, f);
  }
  f = message.getTreeSize();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(3, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(4, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetEntryAndProofRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetEntryAndProofRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 leaf_index = 2;
 * @return {string}
 */
proto.trillian.GetEntryAndProofRequest.prototype.getLeafIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};

/** @param {string} value */
proto.trillian.GetEntryAndProofRequest.prototype.setLeafIndex = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 tree_size = 3;
 * @return {string}
 */
proto.trillian.GetEntryAndProofRequest.prototype.getTreeSize = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};

/** @param {string} value */
proto.trillian.GetEntryAndProofRequest.prototype.setTreeSize = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ChargeTo charge_to = 4;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetEntryAndProofRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    4
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetEntryAndProofRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.GetEntryAndProofRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetEntryAndProofRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetEntryAndProofResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetEntryAndProofResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetEntryAndProofResponse.displayName =
    "proto.trillian.GetEntryAndProofResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetEntryAndProofResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetEntryAndProofResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetEntryAndProofResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetEntryAndProofResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        proof:
          (f = msg.getProof()) &&
          proto.trillian.Proof.toObject(includeInstance, f),
        leaf:
          (f = msg.getLeaf()) &&
          proto.trillian.LogLeaf.toObject(includeInstance, f),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetEntryAndProofResponse}
 */
proto.trillian.GetEntryAndProofResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetEntryAndProofResponse();
  return proto.trillian.GetEntryAndProofResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetEntryAndProofResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetEntryAndProofResponse}
 */
proto.trillian.GetEntryAndProofResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.Proof();
        reader.readMessage(
          value,
          proto.trillian.Proof.deserializeBinaryFromReader
        );
        msg.setProof(value);
        break;
      case 3:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.setLeaf(value);
        break;
      case 4:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetEntryAndProofResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetEntryAndProofResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetEntryAndProofResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetEntryAndProofResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getProof();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.Proof.serializeBinaryToWriter);
  }
  f = message.getLeaf();
  if (f != null) {
    writer.writeMessage(3, f, proto.trillian.LogLeaf.serializeBinaryToWriter);
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * optional Proof proof = 2;
 * @return {?proto.trillian.Proof}
 */
proto.trillian.GetEntryAndProofResponse.prototype.getProof = function() {
  return /** @type{?proto.trillian.Proof} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.Proof,
    2
  ));
};

/** @param {?proto.trillian.Proof|undefined} value */
proto.trillian.GetEntryAndProofResponse.prototype.setProof = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetEntryAndProofResponse.prototype.clearProof = function() {
  this.setProof(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetEntryAndProofResponse.prototype.hasProof = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * optional LogLeaf leaf = 3;
 * @return {?proto.trillian.LogLeaf}
 */
proto.trillian.GetEntryAndProofResponse.prototype.getLeaf = function() {
  return /** @type{?proto.trillian.LogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.LogLeaf,
    3
  ));
};

/** @param {?proto.trillian.LogLeaf|undefined} value */
proto.trillian.GetEntryAndProofResponse.prototype.setLeaf = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetEntryAndProofResponse.prototype.clearLeaf = function() {
  this.setLeaf(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetEntryAndProofResponse.prototype.hasLeaf = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * optional SignedLogRoot signed_log_root = 4;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetEntryAndProofResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    4
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetEntryAndProofResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.GetEntryAndProofResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetEntryAndProofResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.InitLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.InitLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.InitLogRequest.displayName = "proto.trillian.InitLogRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.InitLogRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.InitLogRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.InitLogRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.InitLogRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.InitLogRequest}
 */
proto.trillian.InitLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.InitLogRequest();
  return proto.trillian.InitLogRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.InitLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.InitLogRequest}
 */
proto.trillian.InitLogRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.InitLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.InitLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.InitLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.InitLogRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(2, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.InitLogRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.InitLogRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional ChargeTo charge_to = 2;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.InitLogRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    2
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.InitLogRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.InitLogRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.InitLogRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.InitLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.InitLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.InitLogResponse.displayName = "proto.trillian.InitLogResponse";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.InitLogResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.InitLogResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.InitLogResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.InitLogResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        created:
          (f = msg.getCreated()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.InitLogResponse}
 */
proto.trillian.InitLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.InitLogResponse();
  return proto.trillian.InitLogResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.InitLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.InitLogResponse}
 */
proto.trillian.InitLogResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setCreated(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.InitLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.InitLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.InitLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.InitLogResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getCreated();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * optional SignedLogRoot created = 1;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.InitLogResponse.prototype.getCreated = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    1
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.InitLogResponse.prototype.setCreated = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.trillian.InitLogResponse.prototype.clearCreated = function() {
  this.setCreated(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.InitLogResponse.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.QueueLeavesRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.QueueLeavesRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.QueueLeavesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.QueueLeavesRequest.displayName =
    "proto.trillian.QueueLeavesRequest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.QueueLeavesRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.QueueLeavesRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.QueueLeavesRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.QueueLeavesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.QueueLeavesRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leavesList: jspb.Message.toObjectList(
          msg.getLeavesList(),
          proto.trillian.LogLeaf.toObject,
          includeInstance
        ),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.QueueLeavesRequest}
 */
proto.trillian.QueueLeavesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.QueueLeavesRequest();
  return proto.trillian.QueueLeavesRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.QueueLeavesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.QueueLeavesRequest}
 */
proto.trillian.QueueLeavesRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.addLeaves(value);
        break;
      case 3:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.QueueLeavesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.QueueLeavesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.QueueLeavesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.QueueLeavesRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.LogLeaf.serializeBinaryToWriter
    );
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(3, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.QueueLeavesRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.QueueLeavesRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated LogLeaf leaves = 2;
 * @return {!Array.<!proto.trillian.LogLeaf>}
 */
proto.trillian.QueueLeavesRequest.prototype.getLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.LogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.LogLeaf>} value */
proto.trillian.QueueLeavesRequest.prototype.setLeavesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.LogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.QueueLeavesRequest.prototype.addLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.LogLeaf,
    opt_index
  );
};

proto.trillian.QueueLeavesRequest.prototype.clearLeavesList = function() {
  this.setLeavesList([]);
};

/**
 * optional ChargeTo charge_to = 3;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.QueueLeavesRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    3
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.QueueLeavesRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.QueueLeavesRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueueLeavesRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.QueueLeavesResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.QueueLeavesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.QueueLeavesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.QueueLeavesResponse.displayName =
    "proto.trillian.QueueLeavesResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.QueueLeavesResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.QueueLeavesResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.QueueLeavesResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.QueueLeavesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.QueueLeavesResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        queuedLeavesList: jspb.Message.toObjectList(
          msg.getQueuedLeavesList(),
          proto.trillian.QueuedLogLeaf.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.QueueLeavesResponse}
 */
proto.trillian.QueueLeavesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.QueueLeavesResponse();
  return proto.trillian.QueueLeavesResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.QueueLeavesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.QueueLeavesResponse}
 */
proto.trillian.QueueLeavesResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.QueuedLogLeaf();
        reader.readMessage(
          value,
          proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader
        );
        msg.addQueuedLeaves(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.QueueLeavesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.QueueLeavesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.QueueLeavesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.QueueLeavesResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getQueuedLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.QueuedLogLeaf.serializeBinaryToWriter
    );
  }
};

/**
 * repeated QueuedLogLeaf queued_leaves = 2;
 * @return {!Array.<!proto.trillian.QueuedLogLeaf>}
 */
proto.trillian.QueueLeavesResponse.prototype.getQueuedLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.QueuedLogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.QueuedLogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.QueuedLogLeaf>} value */
proto.trillian.QueueLeavesResponse.prototype.setQueuedLeavesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.QueuedLogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.QueuedLogLeaf}
 */
proto.trillian.QueueLeavesResponse.prototype.addQueuedLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.QueuedLogLeaf,
    opt_index
  );
};

proto.trillian.QueueLeavesResponse.prototype.clearQueuedLeavesList = function() {
  this.setQueuedLeavesList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.AddSequencedLeavesRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.AddSequencedLeavesRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.AddSequencedLeavesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.AddSequencedLeavesRequest.displayName =
    "proto.trillian.AddSequencedLeavesRequest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.AddSequencedLeavesRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.AddSequencedLeavesRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.AddSequencedLeavesRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.AddSequencedLeavesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.AddSequencedLeavesRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leavesList: jspb.Message.toObjectList(
          msg.getLeavesList(),
          proto.trillian.LogLeaf.toObject,
          includeInstance
        ),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.AddSequencedLeavesRequest}
 */
proto.trillian.AddSequencedLeavesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.AddSequencedLeavesRequest();
  return proto.trillian.AddSequencedLeavesRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.AddSequencedLeavesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.AddSequencedLeavesRequest}
 */
proto.trillian.AddSequencedLeavesRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.addLeaves(value);
        break;
      case 4:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.AddSequencedLeavesRequest.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.AddSequencedLeavesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.AddSequencedLeavesRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.LogLeaf.serializeBinaryToWriter
    );
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(4, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.AddSequencedLeavesRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated LogLeaf leaves = 2;
 * @return {!Array.<!proto.trillian.LogLeaf>}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.getLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.LogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.LogLeaf>} value */
proto.trillian.AddSequencedLeavesRequest.prototype.setLeavesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.LogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.addLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.LogLeaf,
    opt_index
  );
};

proto.trillian.AddSequencedLeavesRequest.prototype.clearLeavesList = function() {
  this.setLeavesList([]);
};

/**
 * optional ChargeTo charge_to = 4;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    4
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.AddSequencedLeavesRequest.prototype.setChargeTo = function(
  value
) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.AddSequencedLeavesRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.AddSequencedLeavesRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.AddSequencedLeavesResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.AddSequencedLeavesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.AddSequencedLeavesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.AddSequencedLeavesResponse.displayName =
    "proto.trillian.AddSequencedLeavesResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.AddSequencedLeavesResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.AddSequencedLeavesResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.AddSequencedLeavesResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.AddSequencedLeavesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.AddSequencedLeavesResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        resultsList: jspb.Message.toObjectList(
          msg.getResultsList(),
          proto.trillian.QueuedLogLeaf.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.AddSequencedLeavesResponse}
 */
proto.trillian.AddSequencedLeavesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.AddSequencedLeavesResponse();
  return proto.trillian.AddSequencedLeavesResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.AddSequencedLeavesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.AddSequencedLeavesResponse}
 */
proto.trillian.AddSequencedLeavesResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.QueuedLogLeaf();
        reader.readMessage(
          value,
          proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader
        );
        msg.addResults(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.AddSequencedLeavesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.AddSequencedLeavesResponse.serializeBinaryToWriter(
    this,
    writer
  );
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.AddSequencedLeavesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.AddSequencedLeavesResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.QueuedLogLeaf.serializeBinaryToWriter
    );
  }
};

/**
 * repeated QueuedLogLeaf results = 2;
 * @return {!Array.<!proto.trillian.QueuedLogLeaf>}
 */
proto.trillian.AddSequencedLeavesResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.trillian.QueuedLogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.QueuedLogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.QueuedLogLeaf>} value */
proto.trillian.AddSequencedLeavesResponse.prototype.setResultsList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.QueuedLogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.QueuedLogLeaf}
 */
proto.trillian.AddSequencedLeavesResponse.prototype.addResults = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.QueuedLogLeaf,
    opt_index
  );
};

proto.trillian.AddSequencedLeavesResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByIndexRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetLeavesByIndexRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetLeavesByIndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByIndexRequest.displayName =
    "proto.trillian.GetLeavesByIndexRequest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetLeavesByIndexRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByIndexRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByIndexRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByIndexRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByIndexRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leafIndexList: jspb.Message.getRepeatedField(msg, 2),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByIndexRequest}
 */
proto.trillian.GetLeavesByIndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByIndexRequest();
  return proto.trillian.GetLeavesByIndexRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByIndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByIndexRequest}
 */
proto.trillian.GetLeavesByIndexRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {!Array.<number>} */ (reader.readPackedInt64String());
        msg.setLeafIndexList(value);
        break;
      case 5:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByIndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByIndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByIndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByIndexRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeafIndexList();
  if (f.length > 0) {
    writer.writePackedInt64String(2, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(5, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetLeavesByIndexRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetLeavesByIndexRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated int64 leaf_index = 2;
 * @return {!Array.<string>}
 */
proto.trillian.GetLeavesByIndexRequest.prototype.getLeafIndexList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(
    this,
    2
  ));
};

/** @param {!Array.<string>} value */
proto.trillian.GetLeavesByIndexRequest.prototype.setLeafIndexList = function(
  value
) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.trillian.GetLeavesByIndexRequest.prototype.addLeafIndex = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.trillian.GetLeavesByIndexRequest.prototype.clearLeafIndexList = function() {
  this.setLeafIndexList([]);
};

/**
 * optional ChargeTo charge_to = 5;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetLeavesByIndexRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    5
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetLeavesByIndexRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.trillian.GetLeavesByIndexRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByIndexRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByIndexResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetLeavesByIndexResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetLeavesByIndexResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByIndexResponse.displayName =
    "proto.trillian.GetLeavesByIndexResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetLeavesByIndexResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByIndexResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByIndexResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByIndexResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByIndexResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        leavesList: jspb.Message.toObjectList(
          msg.getLeavesList(),
          proto.trillian.LogLeaf.toObject,
          includeInstance
        ),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByIndexResponse}
 */
proto.trillian.GetLeavesByIndexResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByIndexResponse();
  return proto.trillian.GetLeavesByIndexResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByIndexResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByIndexResponse}
 */
proto.trillian.GetLeavesByIndexResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.addLeaves(value);
        break;
      case 3:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByIndexResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByIndexResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByIndexResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByIndexResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.LogLeaf.serializeBinaryToWriter
    );
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * repeated LogLeaf leaves = 2;
 * @return {!Array.<!proto.trillian.LogLeaf>}
 */
proto.trillian.GetLeavesByIndexResponse.prototype.getLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.LogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.LogLeaf>} value */
proto.trillian.GetLeavesByIndexResponse.prototype.setLeavesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.LogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.GetLeavesByIndexResponse.prototype.addLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.LogLeaf,
    opt_index
  );
};

proto.trillian.GetLeavesByIndexResponse.prototype.clearLeavesList = function() {
  this.setLeavesList([]);
};

/**
 * optional SignedLogRoot signed_log_root = 3;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetLeavesByIndexResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    3
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetLeavesByIndexResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetLeavesByIndexResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByIndexResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByRangeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetLeavesByRangeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByRangeRequest.displayName =
    "proto.trillian.GetLeavesByRangeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByRangeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByRangeRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByRangeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByRangeRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        startIndex: jspb.Message.getFieldWithDefault(msg, 2, "0"),
        count: jspb.Message.getFieldWithDefault(msg, 3, "0"),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByRangeRequest}
 */
proto.trillian.GetLeavesByRangeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByRangeRequest();
  return proto.trillian.GetLeavesByRangeRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByRangeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByRangeRequest}
 */
proto.trillian.GetLeavesByRangeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setStartIndex(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setCount(value);
        break;
      case 4:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByRangeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByRangeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByRangeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getStartIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(2, f);
  }
  f = message.getCount();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(3, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(4, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetLeavesByRangeRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional int64 start_index = 2;
 * @return {string}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.getStartIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};

/** @param {string} value */
proto.trillian.GetLeavesByRangeRequest.prototype.setStartIndex = function(
  value
) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional int64 count = 3;
 * @return {string}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.getCount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};

/** @param {string} value */
proto.trillian.GetLeavesByRangeRequest.prototype.setCount = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ChargeTo charge_to = 4;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    4
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetLeavesByRangeRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};

proto.trillian.GetLeavesByRangeRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByRangeRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 4) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByRangeResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetLeavesByRangeResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetLeavesByRangeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByRangeResponse.displayName =
    "proto.trillian.GetLeavesByRangeResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetLeavesByRangeResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByRangeResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByRangeResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByRangeResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByRangeResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        leavesList: jspb.Message.toObjectList(
          msg.getLeavesList(),
          proto.trillian.LogLeaf.toObject,
          includeInstance
        ),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByRangeResponse}
 */
proto.trillian.GetLeavesByRangeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByRangeResponse();
  return proto.trillian.GetLeavesByRangeResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByRangeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByRangeResponse}
 */
proto.trillian.GetLeavesByRangeResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.addLeaves(value);
        break;
      case 2:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByRangeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByRangeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByRangeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByRangeResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.trillian.LogLeaf.serializeBinaryToWriter
    );
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * repeated LogLeaf leaves = 1;
 * @return {!Array.<!proto.trillian.LogLeaf>}
 */
proto.trillian.GetLeavesByRangeResponse.prototype.getLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.LogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.LogLeaf,
    1
  ));
};

/** @param {!Array.<!proto.trillian.LogLeaf>} value */
proto.trillian.GetLeavesByRangeResponse.prototype.setLeavesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.trillian.LogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.GetLeavesByRangeResponse.prototype.addLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.trillian.LogLeaf,
    opt_index
  );
};

proto.trillian.GetLeavesByRangeResponse.prototype.clearLeavesList = function() {
  this.setLeavesList([]);
};

/**
 * optional SignedLogRoot signed_log_root = 2;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetLeavesByRangeResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    2
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetLeavesByRangeResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.GetLeavesByRangeResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByRangeResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByHashRequest = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetLeavesByHashRequest.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetLeavesByHashRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByHashRequest.displayName =
    "proto.trillian.GetLeavesByHashRequest";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetLeavesByHashRequest.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByHashRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByHashRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByHashRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByHashRequest.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        logId: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        leafHashList: msg.getLeafHashList_asB64(),
        orderBySequence: jspb.Message.getFieldWithDefault(msg, 3, false),
        chargeTo:
          (f = msg.getChargeTo()) &&
          proto.trillian.ChargeTo.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByHashRequest}
 */
proto.trillian.GetLeavesByHashRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByHashRequest();
  return proto.trillian.GetLeavesByHashRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByHashRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByHashRequest}
 */
proto.trillian.GetLeavesByHashRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLogId(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addLeafHash(value);
        break;
      case 3:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setOrderBySequence(value);
        break;
      case 5:
        var value = new proto.trillian.ChargeTo();
        reader.readMessage(
          value,
          proto.trillian.ChargeTo.deserializeBinaryFromReader
        );
        msg.setChargeTo(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByHashRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByHashRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByHashRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByHashRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLogId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getLeafHashList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(2, f);
  }
  f = message.getOrderBySequence();
  if (f) {
    writer.writeBool(3, f);
  }
  f = message.getChargeTo();
  if (f != null) {
    writer.writeMessage(5, f, proto.trillian.ChargeTo.serializeBinaryToWriter);
  }
};

/**
 * optional int64 log_id = 1;
 * @return {string}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getLogId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetLeavesByHashRequest.prototype.setLogId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated bytes leaf_hash = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getLeafHashList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    2
  ));
};

/**
 * repeated bytes leaf_hash = 2;
 * This is a type-conversion wrapper around `getLeafHashList()`
 * @return {!Array.<string>}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getLeafHashList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
    this.getLeafHashList()
  ));
};

/**
 * repeated bytes leaf_hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeafHashList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getLeafHashList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getLeafHashList()
  ));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.trillian.GetLeavesByHashRequest.prototype.setLeafHashList = function(
  value
) {
  jspb.Message.setField(this, 2, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.trillian.GetLeavesByHashRequest.prototype.addLeafHash = function(
  value,
  opt_index
) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};

proto.trillian.GetLeavesByHashRequest.prototype.clearLeafHashList = function() {
  this.setLeafHashList([]);
};

/**
 * optional bool order_by_sequence = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getOrderBySequence = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    false
  ));
};

/** @param {boolean} value */
proto.trillian.GetLeavesByHashRequest.prototype.setOrderBySequence = function(
  value
) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional ChargeTo charge_to = 5;
 * @return {?proto.trillian.ChargeTo}
 */
proto.trillian.GetLeavesByHashRequest.prototype.getChargeTo = function() {
  return /** @type{?proto.trillian.ChargeTo} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.ChargeTo,
    5
  ));
};

/** @param {?proto.trillian.ChargeTo|undefined} value */
proto.trillian.GetLeavesByHashRequest.prototype.setChargeTo = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};

proto.trillian.GetLeavesByHashRequest.prototype.clearChargeTo = function() {
  this.setChargeTo(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByHashRequest.prototype.hasChargeTo = function() {
  return jspb.Message.getField(this, 5) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetLeavesByHashResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.GetLeavesByHashResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.GetLeavesByHashResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetLeavesByHashResponse.displayName =
    "proto.trillian.GetLeavesByHashResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.GetLeavesByHashResponse.repeatedFields_ = [2];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetLeavesByHashResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetLeavesByHashResponse.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetLeavesByHashResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetLeavesByHashResponse.toObject = function(
    includeInstance,
    msg
  ) {
    var f,
      obj = {
        leavesList: jspb.Message.toObjectList(
          msg.getLeavesList(),
          proto.trillian.LogLeaf.toObject,
          includeInstance
        ),
        signedLogRoot:
          (f = msg.getSignedLogRoot()) &&
          trillian_pb.SignedLogRoot.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetLeavesByHashResponse}
 */
proto.trillian.GetLeavesByHashResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetLeavesByHashResponse();
  return proto.trillian.GetLeavesByHashResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetLeavesByHashResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetLeavesByHashResponse}
 */
proto.trillian.GetLeavesByHashResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 2:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.addLeaves(value);
        break;
      case 3:
        var value = new trillian_pb.SignedLogRoot();
        reader.readMessage(
          value,
          trillian_pb.SignedLogRoot.deserializeBinaryFromReader
        );
        msg.setSignedLogRoot(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetLeavesByHashResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetLeavesByHashResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetLeavesByHashResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetLeavesByHashResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLeavesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.trillian.LogLeaf.serializeBinaryToWriter
    );
  }
  f = message.getSignedLogRoot();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trillian_pb.SignedLogRoot.serializeBinaryToWriter
    );
  }
};

/**
 * repeated LogLeaf leaves = 2;
 * @return {!Array.<!proto.trillian.LogLeaf>}
 */
proto.trillian.GetLeavesByHashResponse.prototype.getLeavesList = function() {
  return /** @type{!Array.<!proto.trillian.LogLeaf>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.trillian.LogLeaf,
    2
  ));
};

/** @param {!Array.<!proto.trillian.LogLeaf>} value */
proto.trillian.GetLeavesByHashResponse.prototype.setLeavesList = function(
  value
) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};

/**
 * @param {!proto.trillian.LogLeaf=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.GetLeavesByHashResponse.prototype.addLeaves = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    2,
    opt_value,
    proto.trillian.LogLeaf,
    opt_index
  );
};

proto.trillian.GetLeavesByHashResponse.prototype.clearLeavesList = function() {
  this.setLeavesList([]);
};

/**
 * optional SignedLogRoot signed_log_root = 3;
 * @return {?proto.trillian.SignedLogRoot}
 */
proto.trillian.GetLeavesByHashResponse.prototype.getSignedLogRoot = function() {
  return /** @type{?proto.trillian.SignedLogRoot} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.SignedLogRoot,
    3
  ));
};

/** @param {?proto.trillian.SignedLogRoot|undefined} value */
proto.trillian.GetLeavesByHashResponse.prototype.setSignedLogRoot = function(
  value
) {
  jspb.Message.setWrapperField(this, 3, value);
};

proto.trillian.GetLeavesByHashResponse.prototype.clearSignedLogRoot = function() {
  this.setSignedLogRoot(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.GetLeavesByHashResponse.prototype.hasSignedLogRoot = function() {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.QueuedLogLeaf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.QueuedLogLeaf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.QueuedLogLeaf.displayName = "proto.trillian.QueuedLogLeaf";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.QueuedLogLeaf.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.QueuedLogLeaf.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.QueuedLogLeaf} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.QueuedLogLeaf.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        leaf:
          (f = msg.getLeaf()) &&
          proto.trillian.LogLeaf.toObject(includeInstance, f),
        status:
          (f = msg.getStatus()) &&
          google_rpc_status_pb.Status.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.QueuedLogLeaf}
 */
proto.trillian.QueuedLogLeaf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.QueuedLogLeaf();
  return proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.QueuedLogLeaf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.QueuedLogLeaf}
 */
proto.trillian.QueuedLogLeaf.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.trillian.LogLeaf();
        reader.readMessage(
          value,
          proto.trillian.LogLeaf.deserializeBinaryFromReader
        );
        msg.setLeaf(value);
        break;
      case 2:
        var value = new google_rpc_status_pb.Status();
        reader.readMessage(
          value,
          google_rpc_status_pb.Status.deserializeBinaryFromReader
        );
        msg.setStatus(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.QueuedLogLeaf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.QueuedLogLeaf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.QueuedLogLeaf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.QueuedLogLeaf.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getLeaf();
  if (f != null) {
    writer.writeMessage(1, f, proto.trillian.LogLeaf.serializeBinaryToWriter);
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_rpc_status_pb.Status.serializeBinaryToWriter
    );
  }
};

/**
 * optional LogLeaf leaf = 1;
 * @return {?proto.trillian.LogLeaf}
 */
proto.trillian.QueuedLogLeaf.prototype.getLeaf = function() {
  return /** @type{?proto.trillian.LogLeaf} */ (jspb.Message.getWrapperField(
    this,
    proto.trillian.LogLeaf,
    1
  ));
};

/** @param {?proto.trillian.LogLeaf|undefined} value */
proto.trillian.QueuedLogLeaf.prototype.setLeaf = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.trillian.QueuedLogLeaf.prototype.clearLeaf = function() {
  this.setLeaf(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueuedLogLeaf.prototype.hasLeaf = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional google.rpc.Status status = 2;
 * @return {?proto.google.rpc.Status}
 */
proto.trillian.QueuedLogLeaf.prototype.getStatus = function() {
  return /** @type{?proto.google.rpc.Status} */ (jspb.Message.getWrapperField(
    this,
    google_rpc_status_pb.Status,
    2
  ));
};

/** @param {?proto.google.rpc.Status|undefined} value */
proto.trillian.QueuedLogLeaf.prototype.setStatus = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.QueuedLogLeaf.prototype.clearStatus = function() {
  this.setStatus(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.QueuedLogLeaf.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.LogLeaf = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.LogLeaf, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.LogLeaf.displayName = "proto.trillian.LogLeaf";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.LogLeaf.prototype.toObject = function(opt_includeInstance) {
    return proto.trillian.LogLeaf.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.LogLeaf} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.LogLeaf.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        merkleLeafHash: msg.getMerkleLeafHash_asB64(),
        leafValue: msg.getLeafValue_asB64(),
        extraData: msg.getExtraData_asB64(),
        leafIndex: jspb.Message.getFieldWithDefault(msg, 4, "0"),
        leafIdentityHash: msg.getLeafIdentityHash_asB64(),
        queueTimestamp:
          (f = msg.getQueueTimestamp()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
        integrateTimestamp:
          (f = msg.getIntegrateTimestamp()) &&
          google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.LogLeaf.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.LogLeaf();
  return proto.trillian.LogLeaf.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.LogLeaf} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.LogLeaf}
 */
proto.trillian.LogLeaf.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setMerkleLeafHash(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLeafValue(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setExtraData(value);
        break;
      case 4:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLeafIndex(value);
        break;
      case 5:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setLeafIdentityHash(value);
        break;
      case 6:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setQueueTimestamp(value);
        break;
      case 7:
        var value = new google_protobuf_timestamp_pb.Timestamp();
        reader.readMessage(
          value,
          google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader
        );
        msg.setIntegrateTimestamp(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.LogLeaf.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.LogLeaf.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.LogLeaf} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.LogLeaf.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMerkleLeafHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getLeafValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getExtraData_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getLeafIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(4, f);
  }
  f = message.getLeafIdentityHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(5, f);
  }
  f = message.getQueueTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getIntegrateTimestamp();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};

/**
 * optional bytes merkle_leaf_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.trillian.LogLeaf.prototype.getMerkleLeafHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ""
  ));
};

/**
 * optional bytes merkle_leaf_hash = 1;
 * This is a type-conversion wrapper around `getMerkleLeafHash()`
 * @return {string}
 */
proto.trillian.LogLeaf.prototype.getMerkleLeafHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getMerkleLeafHash()
  ));
};

/**
 * optional bytes merkle_leaf_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMerkleLeafHash()`
 * @return {!Uint8Array}
 */
proto.trillian.LogLeaf.prototype.getMerkleLeafHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getMerkleLeafHash()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.trillian.LogLeaf.prototype.setMerkleLeafHash = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * optional bytes leaf_value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.trillian.LogLeaf.prototype.getLeafValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ""
  ));
};

/**
 * optional bytes leaf_value = 2;
 * This is a type-conversion wrapper around `getLeafValue()`
 * @return {string}
 */
proto.trillian.LogLeaf.prototype.getLeafValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getLeafValue()));
};

/**
 * optional bytes leaf_value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeafValue()`
 * @return {!Uint8Array}
 */
proto.trillian.LogLeaf.prototype.getLeafValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getLeafValue()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.trillian.LogLeaf.prototype.setLeafValue = function(value) {
  jspb.Message.setField(this, 2, value);
};

/**
 * optional bytes extra_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.trillian.LogLeaf.prototype.getExtraData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    ""
  ));
};

/**
 * optional bytes extra_data = 3;
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {string}
 */
proto.trillian.LogLeaf.prototype.getExtraData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getExtraData()));
};

/**
 * optional bytes extra_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtraData()`
 * @return {!Uint8Array}
 */
proto.trillian.LogLeaf.prototype.getExtraData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getExtraData()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.trillian.LogLeaf.prototype.setExtraData = function(value) {
  jspb.Message.setField(this, 3, value);
};

/**
 * optional int64 leaf_index = 4;
 * @return {string}
 */
proto.trillian.LogLeaf.prototype.getLeafIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};

/** @param {string} value */
proto.trillian.LogLeaf.prototype.setLeafIndex = function(value) {
  jspb.Message.setField(this, 4, value);
};

/**
 * optional bytes leaf_identity_hash = 5;
 * @return {!(string|Uint8Array)}
 */
proto.trillian.LogLeaf.prototype.getLeafIdentityHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    5,
    ""
  ));
};

/**
 * optional bytes leaf_identity_hash = 5;
 * This is a type-conversion wrapper around `getLeafIdentityHash()`
 * @return {string}
 */
proto.trillian.LogLeaf.prototype.getLeafIdentityHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getLeafIdentityHash()
  ));
};

/**
 * optional bytes leaf_identity_hash = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLeafIdentityHash()`
 * @return {!Uint8Array}
 */
proto.trillian.LogLeaf.prototype.getLeafIdentityHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getLeafIdentityHash()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.trillian.LogLeaf.prototype.setLeafIdentityHash = function(value) {
  jspb.Message.setField(this, 5, value);
};

/**
 * optional google.protobuf.Timestamp queue_timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.trillian.LogLeaf.prototype.getQueueTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    6
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.trillian.LogLeaf.prototype.setQueueTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};

proto.trillian.LogLeaf.prototype.clearQueueTimestamp = function() {
  this.setQueueTimestamp(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.LogLeaf.prototype.hasQueueTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};

/**
 * optional google.protobuf.Timestamp integrate_timestamp = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.trillian.LogLeaf.prototype.getIntegrateTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_timestamp_pb.Timestamp,
    7
  ));
};

/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.trillian.LogLeaf.prototype.setIntegrateTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};

proto.trillian.LogLeaf.prototype.clearIntegrateTimestamp = function() {
  this.setIntegrateTimestamp(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.LogLeaf.prototype.hasIntegrateTimestamp = function() {
  return jspb.Message.getField(this, 7) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.Proof = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.Proof.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.Proof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.Proof.displayName = "proto.trillian.Proof";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.Proof.repeatedFields_ = [3];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.Proof.prototype.toObject = function(opt_includeInstance) {
    return proto.trillian.Proof.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.Proof} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.Proof.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        leafIndex: jspb.Message.getFieldWithDefault(msg, 1, "0"),
        hashesList: msg.getHashesList_asB64()
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.Proof}
 */
proto.trillian.Proof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.Proof();
  return proto.trillian.Proof.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.Proof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.Proof}
 */
proto.trillian.Proof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setLeafIndex(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.addHashes(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.Proof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.Proof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.Proof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.Proof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLeafIndex();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
  f = message.getHashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(3, f);
  }
};

/**
 * optional int64 leaf_index = 1;
 * @return {string}
 */
proto.trillian.Proof.prototype.getLeafIndex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.Proof.prototype.setLeafIndex = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * repeated bytes hashes = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.trillian.Proof.prototype.getHashesList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(
    this,
    3
  ));
};

/**
 * repeated bytes hashes = 3;
 * This is a type-conversion wrapper around `getHashesList()`
 * @return {!Array.<string>}
 */
proto.trillian.Proof.prototype.getHashesList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
    this.getHashesList()
  ));
};

/**
 * repeated bytes hashes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHashesList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.trillian.Proof.prototype.getHashesList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
    this.getHashesList()
  ));
};

/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.trillian.Proof.prototype.setHashesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};

/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.trillian.Proof.prototype.addHashes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};

proto.trillian.Proof.prototype.clearHashesList = function() {
  this.setHashesList([]);
};

goog.object.extend(exports, proto.trillian);
