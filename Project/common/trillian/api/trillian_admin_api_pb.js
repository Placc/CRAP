/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require("google-protobuf");
var goog = jspb;
var global = Function("return this")();

var trillian_pb = require("./trillian_pb.js");
var crypto_keyspb_keyspb_pb = require("../crypto/keyspb/keyspb_pb.js");
var google_protobuf_field_mask_pb = require("google-protobuf/google/protobuf/field_mask_pb");
goog.exportSymbol("proto.trillian.CreateTreeRequest", null, global);
goog.exportSymbol("proto.trillian.DeleteTreeRequest", null, global);
goog.exportSymbol("proto.trillian.GetTreeRequest", null, global);
goog.exportSymbol("proto.trillian.ListTreesRequest", null, global);
goog.exportSymbol("proto.trillian.ListTreesResponse", null, global);
goog.exportSymbol("proto.trillian.UndeleteTreeRequest", null, global);
goog.exportSymbol("proto.trillian.UpdateTreeRequest", null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.ListTreesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.ListTreesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.ListTreesRequest.displayName =
    "proto.trillian.ListTreesRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.ListTreesRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.ListTreesRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.ListTreesRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.ListTreesRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        showDeleted: jspb.Message.getFieldWithDefault(msg, 1, false)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.ListTreesRequest}
 */
proto.trillian.ListTreesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.ListTreesRequest();
  return proto.trillian.ListTreesRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.ListTreesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.ListTreesRequest}
 */
proto.trillian.ListTreesRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setShowDeleted(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.ListTreesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.ListTreesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.ListTreesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.ListTreesRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getShowDeleted();
  if (f) {
    writer.writeBool(1, f);
  }
};

/**
 * optional bool show_deleted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.trillian.ListTreesRequest.prototype.getShowDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    false
  ));
};

/** @param {boolean} value */
proto.trillian.ListTreesRequest.prototype.setShowDeleted = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.ListTreesResponse = function(opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.trillian.ListTreesResponse.repeatedFields_,
    null
  );
};
goog.inherits(proto.trillian.ListTreesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.ListTreesResponse.displayName =
    "proto.trillian.ListTreesResponse";
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.trillian.ListTreesResponse.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.ListTreesResponse.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.ListTreesResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.ListTreesResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.ListTreesResponse.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        treeList: jspb.Message.toObjectList(
          msg.getTreeList(),
          trillian_pb.Tree.toObject,
          includeInstance
        )
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.ListTreesResponse}
 */
proto.trillian.ListTreesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.ListTreesResponse();
  return proto.trillian.ListTreesResponse.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.ListTreesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.ListTreesResponse}
 */
proto.trillian.ListTreesResponse.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new trillian_pb.Tree();
        reader.readMessage(value, trillian_pb.Tree.deserializeBinaryFromReader);
        msg.addTree(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.ListTreesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.ListTreesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.ListTreesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.ListTreesResponse.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTreeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(1, f, trillian_pb.Tree.serializeBinaryToWriter);
  }
};

/**
 * repeated Tree tree = 1;
 * @return {!Array.<!proto.trillian.Tree>}
 */
proto.trillian.ListTreesResponse.prototype.getTreeList = function() {
  return /** @type{!Array.<!proto.trillian.Tree>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    trillian_pb.Tree,
    1
  ));
};

/** @param {!Array.<!proto.trillian.Tree>} value */
proto.trillian.ListTreesResponse.prototype.setTreeList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.trillian.Tree=} opt_value
 * @param {number=} opt_index
 * @return {!proto.trillian.Tree}
 */
proto.trillian.ListTreesResponse.prototype.addTree = function(
  opt_value,
  opt_index
) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.trillian.Tree,
    opt_index
  );
};

proto.trillian.ListTreesResponse.prototype.clearTreeList = function() {
  this.setTreeList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.GetTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.GetTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.GetTreeRequest.displayName = "proto.trillian.GetTreeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.GetTreeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.GetTreeRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.GetTreeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.GetTreeRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        treeId: jspb.Message.getFieldWithDefault(msg, 1, "0")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.GetTreeRequest}
 */
proto.trillian.GetTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.GetTreeRequest();
  return proto.trillian.GetTreeRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.GetTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.GetTreeRequest}
 */
proto.trillian.GetTreeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.GetTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.GetTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.GetTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.GetTreeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTreeId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
};

/**
 * optional int64 tree_id = 1;
 * @return {string}
 */
proto.trillian.GetTreeRequest.prototype.getTreeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.GetTreeRequest.prototype.setTreeId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.CreateTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.CreateTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.CreateTreeRequest.displayName =
    "proto.trillian.CreateTreeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.CreateTreeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.CreateTreeRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.CreateTreeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.CreateTreeRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tree:
          (f = msg.getTree()) && trillian_pb.Tree.toObject(includeInstance, f),
        keySpec:
          (f = msg.getKeySpec()) &&
          crypto_keyspb_keyspb_pb.Specification.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.CreateTreeRequest}
 */
proto.trillian.CreateTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.CreateTreeRequest();
  return proto.trillian.CreateTreeRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.CreateTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.CreateTreeRequest}
 */
proto.trillian.CreateTreeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new trillian_pb.Tree();
        reader.readMessage(value, trillian_pb.Tree.deserializeBinaryFromReader);
        msg.setTree(value);
        break;
      case 2:
        var value = new crypto_keyspb_keyspb_pb.Specification();
        reader.readMessage(
          value,
          crypto_keyspb_keyspb_pb.Specification.deserializeBinaryFromReader
        );
        msg.setKeySpec(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.CreateTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.CreateTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.CreateTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.CreateTreeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(1, f, trillian_pb.Tree.serializeBinaryToWriter);
  }
  f = message.getKeySpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      crypto_keyspb_keyspb_pb.Specification.serializeBinaryToWriter
    );
  }
};

/**
 * optional Tree tree = 1;
 * @return {?proto.trillian.Tree}
 */
proto.trillian.CreateTreeRequest.prototype.getTree = function() {
  return /** @type{?proto.trillian.Tree} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.Tree,
    1
  ));
};

/** @param {?proto.trillian.Tree|undefined} value */
proto.trillian.CreateTreeRequest.prototype.setTree = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.trillian.CreateTreeRequest.prototype.clearTree = function() {
  this.setTree(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.CreateTreeRequest.prototype.hasTree = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional keyspb.Specification key_spec = 2;
 * @return {?proto.keyspb.Specification}
 */
proto.trillian.CreateTreeRequest.prototype.getKeySpec = function() {
  return /** @type{?proto.keyspb.Specification} */ (jspb.Message.getWrapperField(
    this,
    crypto_keyspb_keyspb_pb.Specification,
    2
  ));
};

/** @param {?proto.keyspb.Specification|undefined} value */
proto.trillian.CreateTreeRequest.prototype.setKeySpec = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.CreateTreeRequest.prototype.clearKeySpec = function() {
  this.setKeySpec(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.CreateTreeRequest.prototype.hasKeySpec = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.UpdateTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.UpdateTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.UpdateTreeRequest.displayName =
    "proto.trillian.UpdateTreeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.UpdateTreeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.UpdateTreeRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.UpdateTreeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.UpdateTreeRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        tree:
          (f = msg.getTree()) && trillian_pb.Tree.toObject(includeInstance, f),
        updateMask:
          (f = msg.getUpdateMask()) &&
          google_protobuf_field_mask_pb.FieldMask.toObject(includeInstance, f)
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.UpdateTreeRequest}
 */
proto.trillian.UpdateTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.UpdateTreeRequest();
  return proto.trillian.UpdateTreeRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.UpdateTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.UpdateTreeRequest}
 */
proto.trillian.UpdateTreeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new trillian_pb.Tree();
        reader.readMessage(value, trillian_pb.Tree.deserializeBinaryFromReader);
        msg.setTree(value);
        break;
      case 2:
        var value = new google_protobuf_field_mask_pb.FieldMask();
        reader.readMessage(
          value,
          google_protobuf_field_mask_pb.FieldMask.deserializeBinaryFromReader
        );
        msg.setUpdateMask(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.UpdateTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.UpdateTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.UpdateTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.UpdateTreeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTree();
  if (f != null) {
    writer.writeMessage(1, f, trillian_pb.Tree.serializeBinaryToWriter);
  }
  f = message.getUpdateMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_field_mask_pb.FieldMask.serializeBinaryToWriter
    );
  }
};

/**
 * optional Tree tree = 1;
 * @return {?proto.trillian.Tree}
 */
proto.trillian.UpdateTreeRequest.prototype.getTree = function() {
  return /** @type{?proto.trillian.Tree} */ (jspb.Message.getWrapperField(
    this,
    trillian_pb.Tree,
    1
  ));
};

/** @param {?proto.trillian.Tree|undefined} value */
proto.trillian.UpdateTreeRequest.prototype.setTree = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.trillian.UpdateTreeRequest.prototype.clearTree = function() {
  this.setTree(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.UpdateTreeRequest.prototype.hasTree = function() {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional google.protobuf.FieldMask update_mask = 2;
 * @return {?proto.google.protobuf.FieldMask}
 */
proto.trillian.UpdateTreeRequest.prototype.getUpdateMask = function() {
  return /** @type{?proto.google.protobuf.FieldMask} */ (jspb.Message.getWrapperField(
    this,
    google_protobuf_field_mask_pb.FieldMask,
    2
  ));
};

/** @param {?proto.google.protobuf.FieldMask|undefined} value */
proto.trillian.UpdateTreeRequest.prototype.setUpdateMask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};

proto.trillian.UpdateTreeRequest.prototype.clearUpdateMask = function() {
  this.setUpdateMask(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.trillian.UpdateTreeRequest.prototype.hasUpdateMask = function() {
  return jspb.Message.getField(this, 2) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.DeleteTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.DeleteTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.DeleteTreeRequest.displayName =
    "proto.trillian.DeleteTreeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.DeleteTreeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.DeleteTreeRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.DeleteTreeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.DeleteTreeRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        treeId: jspb.Message.getFieldWithDefault(msg, 1, "0")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.DeleteTreeRequest}
 */
proto.trillian.DeleteTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.DeleteTreeRequest();
  return proto.trillian.DeleteTreeRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.DeleteTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.DeleteTreeRequest}
 */
proto.trillian.DeleteTreeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.DeleteTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.DeleteTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.DeleteTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.DeleteTreeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTreeId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
};

/**
 * optional int64 tree_id = 1;
 * @return {string}
 */
proto.trillian.DeleteTreeRequest.prototype.getTreeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.DeleteTreeRequest.prototype.setTreeId = function(value) {
  jspb.Message.setField(this, 1, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.trillian.UndeleteTreeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.trillian.UndeleteTreeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.trillian.UndeleteTreeRequest.displayName =
    "proto.trillian.UndeleteTreeRequest";
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.trillian.UndeleteTreeRequest.prototype.toObject = function(
    opt_includeInstance
  ) {
    return proto.trillian.UndeleteTreeRequest.toObject(
      opt_includeInstance,
      this
    );
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.trillian.UndeleteTreeRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.trillian.UndeleteTreeRequest.toObject = function(includeInstance, msg) {
    var f,
      obj = {
        treeId: jspb.Message.getFieldWithDefault(msg, 1, "0")
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.trillian.UndeleteTreeRequest}
 */
proto.trillian.UndeleteTreeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.trillian.UndeleteTreeRequest();
  return proto.trillian.UndeleteTreeRequest.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.trillian.UndeleteTreeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.trillian.UndeleteTreeRequest}
 */
proto.trillian.UndeleteTreeRequest.deserializeBinaryFromReader = function(
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {string} */ (reader.readInt64String());
        msg.setTreeId(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.trillian.UndeleteTreeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.trillian.UndeleteTreeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.trillian.UndeleteTreeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.trillian.UndeleteTreeRequest.serializeBinaryToWriter = function(
  message,
  writer
) {
  var f = undefined;
  f = message.getTreeId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(1, f);
  }
};

/**
 * optional int64 tree_id = 1;
 * @return {string}
 */
proto.trillian.UndeleteTreeRequest.prototype.getTreeId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};

/** @param {string} value */
proto.trillian.UndeleteTreeRequest.prototype.setTreeId = function(value) {
  jspb.Message.setField(this, 1, value);
};

goog.object.extend(exports, proto.trillian);
